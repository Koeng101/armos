// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/calibrate": {
            "post": {
                "description": "Calibrates the robot. Should be done occasionally to affirm the robot is where we think it should be.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "low_level"
                ],
                "summary": "Calibrate the arm",
                "parameters": [
                    {
                        "description": "joints to calibrate",
                        "name": "joints",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CalibrateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/directions": {
            "get": {
                "description": "Returns current direction of arm's motors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "setup"
                ],
                "summary": "Returns direction of arm joints",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.JointDirections"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/move": {
            "post": {
                "description": "Moves the robot's stepper motors.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "low_level"
                ],
                "summary": "Move the arm's stepper motors",
                "parameters": [
                    {
                        "description": "steppers coordinates",
                        "name": "move",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.MoveStepperInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "dev"
                ],
                "summary": "A pingable endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/set_directions": {
            "post": {
                "description": "Sets up the robots joints. This only has to be done once during the setup of the robot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "setup"
                ],
                "summary": "Sets direction of arm joints",
                "parameters": [
                    {
                        "description": "direction of joints",
                        "name": "directions",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.JointDirections"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CalibrateInput": {
            "type": "object",
            "properties": {
                "j1": {
                    "type": "boolean"
                },
                "j2": {
                    "type": "boolean"
                },
                "j3": {
                    "type": "boolean"
                },
                "j4": {
                    "type": "boolean"
                },
                "j5": {
                    "type": "boolean"
                },
                "j6": {
                    "type": "boolean"
                },
                "speed": {
                    "type": "integer"
                },
                "tr": {
                    "type": "boolean"
                }
            }
        },
        "main.JointDirections": {
            "type": "object",
            "properties": {
                "j1": {
                    "type": "boolean"
                },
                "j2": {
                    "type": "boolean"
                },
                "j3": {
                    "type": "boolean"
                },
                "j4": {
                    "type": "boolean"
                },
                "j5": {
                    "type": "boolean"
                },
                "j6": {
                    "type": "boolean"
                },
                "tr": {
                    "type": "boolean"
                }
            }
        },
        "main.MoveStepperInput": {
            "type": "object",
            "properties": {
                "accdur": {
                    "type": "integer"
                },
                "accspd": {
                    "type": "integer"
                },
                "dccdur": {
                    "type": "integer"
                },
                "dccspd": {
                    "type": "integer"
                },
                "j1": {
                    "type": "integer"
                },
                "j2": {
                    "type": "integer"
                },
                "j3": {
                    "type": "integer"
                },
                "j4": {
                    "type": "integer"
                },
                "j5": {
                    "type": "integer"
                },
                "j6": {
                    "type": "integer"
                },
                "speed": {
                    "type": "integer"
                },
                "tr": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.1",
	Host:        "",
	BasePath:    "/api/",
	Schemes:     []string{},
	Title:       "ArmOS arm API",
	Description: "The arm API for ArmOS to interact with a variety of different robotic arms, starting with the AR3. It uses the basic interface of `x,y,z,a,b,c` for control.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
