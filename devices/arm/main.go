package main

import (
	"encoding/json"
	"fmt"
	"github.com/jmoiron/sqlx"
	_ "github.com/koeng101/armos/devices/arm/docs" // API docs generated by swaggo/swag
	_ "github.com/mattn/go-sqlite3"
	"github.com/swaggo/swag"
	"log"
	"net/http"
	"os"
)

/******************************************************************************

				armos arm API

This file contains the armos robotic arm API. The armos server would send
either an API request for the robot to home or an API request for the arm to
move to an `x,y,z,a,b,c` position.

Right now, we only support the AR3 robotic arm, but hopefully will support more
in the future.

This initial portion initializes the API itself.

******************************************************************************/

// App is a struct containing all information about the currently deployed
// application, such as the router and database.
type App struct {
	DB     *sqlx.DB
	Router *http.ServeMux
}

// initalizeApp initializes an App for all endpoints to use.
func initializeApp(db *sqlx.DB) App {
	var app App
	app.DB = db
	app.Router = http.NewServeMux()

	// Basic routes
	app.Router.HandleFunc("/api/ping", app.Ping)
	app.Router.HandleFunc("/swagger.json", app.SwaggerJSON)
	app.Router.HandleFunc("/docs", app.SwaggerDocs)

	return app
}

// @title ArmOS arm API
// @version 0.1
// @description The arm API for ArmOS to interact with a variety of different
// @description robotic arms, starting with the AR3. It uses the basic
// @description interface of `x,y,z,a,b,c` for control.
// @BasePath /api/
func main() {
	var dbUrl string
	dbUrl = os.Getenv("DATABASE_URL")
	if dbUrl == "" {
		dbUrl = ":memory:"
	}
	db, err := sqlx.Open("sqlite3", dbUrl)
	if err != nil {
		log.Fatalf("Failed to connect to database with error: %s", err)
	}
	//_ = CreateDatabase(db)
	app := initializeApp(db)

	// Serve application
	s := &http.Server{
		Addr:    ":8080",
		Handler: app.Router,
	}
	log.Fatal(s.ListenAndServe())
}

/******************************************************************************

				armos arm models

******************************************************************************/

//// Coordinate is a struct containing the ABCXYZ coordinates of a given robotic
//// arm position.
//type Coordinate struct {
//	A float64 `json:"a"`
//	B float64 `json:"b"`
//	C float64 `json:"c"`
//	X float64 `json:"x"`
//	Y float64 `json:"y"`
//	Z float64 `json:"z"`
//}
//
//// Response is the response given to a status query on the robotic API.
//type Response struct {
//	Id     int    `db:"id" json:"id"`
//	Status string `db:"status" json:"status"`
//	Start  int    `db:"start" json:"start"`
//	End    int    `db:"end" json:"end"`
//
//	From     Coordinate `json:"from"`
//	To       Coordinate `json:"to"`
//	Backlash Coordinate `json:"backlash"`
//}

/******************************************************************************

                                armos arm routes

******************************************************************************/

// Ping is a simple route for verifying that the service is online.
// @Summary A pingable endpoint
// @Tags dev
// @Produce json
// @Success 200 {object} map[string]string
// @Router /ping [get]
func (app *App) Ping(w http.ResponseWriter, r *http.Request) {
	encoder := json.NewEncoder(w)
	_ = encoder.Encode(map[string]string{"message": "Online"})
}

// SwaggerJSON provides the swagger docs for this api in JSON format.
func (app *App) SwaggerJSON(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	doc, _ := swag.ReadDoc()
	_, _ = w.Write([]byte(doc))
}

// SwaggerDocs provides a human-friendly swagger ui interface.
func (app *App) SwaggerDocs(w http.ResponseWriter, r *http.Request) {
	// https://stackoverflow.com/questions/55733609/display-swagger-ui-on-flask-without-any-hookups
	doc, _ := swag.ReadDoc()
	swaggerDoc := fmt.Sprintf(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-standalone-preset.js"></script> -->
    <script src="//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui-bundle.js"></script> -->
    <link rel="stylesheet" href="//unpkg.com/swagger-ui-dist@3/swagger-ui.css" />
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/swagger-ui/3.22.1/swagger-ui.css" /> -->
    <title>Swagger</title>
</head>
<body>
    <div id="swagger-ui"></div>
    <script>
        window.onload = function() {
          SwaggerUIBundle({
	    spec: %s,
            dom_id: '#swagger-ui',
            presets: [
              SwaggerUIBundle.presets.apis,
              SwaggerUIStandalonePreset
            ],
            layout: "StandaloneLayout"
          })
        }
    </script>
</body>
</html>`, doc)
	_, _ = w.Write([]byte(swaggerDoc))
}
